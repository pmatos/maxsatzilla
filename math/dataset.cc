#include <iostream>
#include <fstream>

#include <cstdlib>
#include <cassert>
#include <cmath>

#include <gsl/gsl_math.h>

#include "dataset.hh"

using std::cerr;
using std::ofstream;

MSZDataSet::MSZDataSet(double **matrix, size_t nrows, size_t ncols, size_t outputs) 
  : matrix(matrix), nrows(nrows), rfeatures(ncols - outputs), ncols(ncols), outputs(outputs) {}
  
MSZDataSet::~MSZDataSet() {

  // Please God, do not let this Seg Fault!

  // Clean up matrix by deleting each line.
  for(size_t row = 0; row < nrows; row++) 
    free(matrix[row]);
	 
  free(matrix);
  
}

void MSZDataSet::dumpPlotFiles(const vector<string> &labels, const string &prefix) const {

  if(labels.size() != ncols) {
    cerr << "Warning: Trying to dump plot files but labels vector is too small.\n";
    return;
  }

  // Dump the files 
  for(size_t out = 0; out < outputs; out++) {
    for(size_t feature = outputs; feature < ncols; feature++) {
      ofstream file;
      file.open((prefix + "_" + labels[out] + "_" + labels[feature] + ".dat").c_str());
      
      file << "# This file is generated by MatSATZilla\n"
	   << "# It should be used with gnuplot to plot\n"
	   << "# the feature " << labels[feature] << " against\n"
	   << "# the output " << labels[out] << "\n"
	   << "#\n"
	// Outputting timestamp could be nice.
	//<< "# Timestamp: " << 
	   << "#\n"
	   << "# " << labels[feature] << "\t\t" << labels[out] << "\n";
      
      // For each instance
      for(size_t i = 0; i < nrows; i++) 
	file << matrix[i][feature] << "\t\t" << matrix[i][out] << "\n";

      file.close();
    }
  }
}

void MSZDataSet::dumpPlotFiles(char **labels, size_t len, char *prefix) const {

  vector<string> vec(len);

  for(size_t i = 0; i < len; i++)
    vec[i] = string(labels[i]);

  dumpPlotFiles(vec, string(prefix));
}

double MSZDataSet::getOutputValue(size_t row, size_t col) const {
  assert(row < nrows);
  assert(col < outputs);

  return matrix[row][col];
}

double MSZDataSet::getFeatureValue(size_t row, size_t col) const {
  assert(row < nrows);
  assert(col < ncols - outputs);

  return matrix[row][col+outputs];
}

void MSZDataSet::standardize() {
  
  static bool stdDone = false;

  if(!stdDone) {
    for(size_t c = outputs; c < ncols; c++) {

      // Compute column mean and compute column variance.
      double mean = 0.0;
      for(size_t r = 0; r < nrows; r++) 
	mean += matrix[r][c];
      mean /= nrows;

      // Compute column standard deviation. 
      double sdv = 0.0;
      for(size_t r = 0; r < nrows; r++) 
	sdv += gsl_pow_2(matrix[r][c] - mean);
      sdv /= nrows;

      for(size_t r = 0; r < nrows; r++) 
	matrix[r][c] = (matrix[r][c] - mean) / sdv;
	
    }

  }


  stdDone = true;

}

void MSZDataSet::standardizeOutputs() {

  static bool stdDone = false;

  if(!stdDone) {
    for(size_t c = 0; c < outputs; c++)
      for(size_t r = 0; r < nrows; r++)
	matrix[r][c] = log(matrix[r][c]);
  }

  stdDone = true;
}

void MSZDataSet::expand(size_t n) { 
  vector<size_t> pvec(ncols - outputs); 
  for(size_t i = 0; i < pvec.size(); i++)
    pvec[i] = i;

  expandOnPartition(n, pvec);
}

void MSZDataSet::expand(size_t n, const vector<vector<size_t> > &pvec) {
  for(size_t i = 0; i < pvec.size(); i++)
    expandOnPartition(n, pvec[i]);
}

void MSZDataSet::expandOnPartition(size_t k, const vector<size_t> &pvec) {
  
  // expansion is quadratic at the minimum and 
  // and be bigger than partition size.
  assert(k > 2 && k <= pvec.size());

  // Standardize features
  standardize();

  // Reallocate the data.
  // If we have N features, then, to expand to a order-K polynomial
  // we are adding 
  // n + (n !) / (k! (n-k!))
  size_t num = 1;
  for(size_t i = 0; i < k; i++) num *= rfeatures - i; // for big k hell breaks loose
  size_t den = 1;
  for(size_t i = k; i > 0; i--) den *= i; 
  size_t nNewF = rfeatures;
  nNewF += num / den;
  ncols += nNewF; // Update number of columns

  // Now, we need to realloc all the structure
  for(size_t r = 0; r < nrows; r++) {
    matrix[r] = (double*)realloc(matrix[r], sizeof(**matrix) * (nNewF + ncols));
    if(matrix[r] == 0) {
      cerr << "Bad news... while trying to allocate memory...\n"; 
      exit(EXIT_FAILURE);
    }
  }
  
  // Compute the cross products
  // To do this we compute all the indices combinations and use them
  // to compute the cross product on columns defined in pvec.
  size_t currColumn = rfeatures + outputs;
  size_t *ind = new size_t [k];
  for(size_t i = 0; i < k; i++) ind[i] = i;

  // Compute cross product for initial configuration
  for(size_t r = 0; r < nrows; r++) {
    matrix[r][currColumn] = computeCrossProduct(r, ind, k, pvec);
  }
  currColumn++;

  size_t n = pvec.size();
  while(1) {
    if(ind[0] == n - k) break;

    for(size_t p = 0; p < k; p++) {
      size_t i = k - p - 1;
      bool incp = false;
      
      // Can I increment this index?
      if(ind[i] < n - p - 1) {
	ind[i]++; // YES
	
	for(size_t inc = 1; inc + i < k; inc++)
	  ind[inc+i] = ind[i] + inc;
	incp = true;

	// Compute cross product in current configuration
	for(size_t r = 0; r < nrows; r++) {
	  matrix[r][currColumn] = computeCrossProduct(r, ind, k, pvec);
	}
	currColumn++;
      }
      if(incp) break;
    }
  }
  delete ind;

  // Compute Powers
  for(size_t i = 0; i < pvec.size(); i++) {
    for(size_t r = 0; r < nrows; r++) {
      // Compute powers for pvec[i] feature
      matrix[r][currColumn] = gsl_pow_int(matrix[r][pvec[i]], k);
    }
  }

}

double MSZDataSet::computeCrossProduct(size_t r, size_t *ind, size_t k, const vector<size_t> &vec) {
  double cp = 1.0; // Cross-product
  for(size_t i = 0; i < k; i++)
   cp *= matrix[r][vec[ind[i]]];
  return cp;
}

/////////////////////////////////////////
/////////////////////////////////////////
//
// API Entrace Function for Data Set creation
//
/////////////////////////////////////////
/////////////////////////////////////////

MSZDataSet *createDataSet(double** matrix, size_t nrows, size_t ncols, size_t outputs) {
  assert(nrows > 0);
  assert(ncols > 0);
  assert(matrix != 0);
  assert(outputs > 0);
  assert(nrows >= ncols - outputs);
  
#ifndef NDEBUG
  for(size_t r = 0; r < nrows; r++)
    assert(matrix[r] != 0);
#endif // NDEBUG

  // The call!
  MSZDataSet *ds = new MSZDataSet(matrix, nrows, ncols, outputs);
  if(!ds) {
    cerr << "Error: Allocation of Dataset\n";
    exit(EXIT_FAILURE);
  }
  
  return ds;
}
