#!/usr/bin/perl

use strict;

use src::UTILS;
die "Usage: $0 <bench> \"\" [<timeout>] [<memout>]\n" if ($#ARGV<=0);

my $launcher = "scripts/tlaunch.bash";
my $tool = './maxsatz';
my $bench = (@ARGV) ? shift @ARGV : die "Must specify file name\n";
my $noarg = (@ARGV) ? shift @ARGV : die "Must specify double quotes...\n";
my $timeout = (@ARGV) ? shift @ARGV : 1000;
my $memout = (@ARGV) ? shift @ARGV : 2000000;

my $outfile = '__msz__xyzOUTyxz__';
my $logfile = '__msz__xyzLOGyxz__';

$bench =~ m/.+\/([^\/\s]+)$/;
my $inst = $1;

my $ncls = &get_num_cls($bench);
#&UTILS::report_item('INFO: Number of clauses', $ncls);

#print "$launcher $tool $timeout $memout $bench $outfile $logfile\n"; #exit;
system("$launcher $tool $timeout $memout $bench $outfile >\& $logfile");

my $runtime = &match_run_time($outfile);
#print "RUNTIME: $runtime\n"; exit;

my $prtstr = '';
if (&match_usage_limit($logfile) || &match_usage_limit($outfile)) {
    #$prtstr = 'CPU time limit exceeded by maxsatz';
    #$prtstr .= sprintf("%-50s  --", $inst);
    $prtstr .= sprintf("%-50s  %5s%10s%5.2f", $inst, '--', ' ', $timeout);
} elsif (&match_error_condition($logfile) || &match_error_condition($outfile)) {
    #$prtstr = 'Error condition from maxsatz';
    #$prtstr .= sprintf("%-50s  xx", $inst);
    $prtstr .= sprintf("%-50s  %5s%10s%5.2f", $inst, 'xx', ' ', $timeout);
} else {
    my $rval = &get_maxsatz_outval($outfile);
    my $mssol = $ncls - $rval;
    #&UTILS::report_item('INFO: Computed maxsat solution', $mssol);
    #$prtstr .= sprintf("%-50s  %d", $inst, $mssol);
    $prtstr .= sprintf("%-50s  %5d%10s%5.2f", $inst, $mssol, ' ', $runtime);
}
print "$prtstr\n";
system("rm -f $outfile $logfile timetable");

1;

sub get_num_cls() {
    my $fname = shift;
    open (BENCHF, "<$fname") || die "Unable to open bench file $fname\n";
    my $ncls = -1;
    while (<BENCHF>) {
	if (m/p\s+cnf\s+(\d+)\s+(\d+)/) { $ncls = $2; last; }
    }
    #print "Num cls: $ncls\n";
    close(BENCHF);
    return $ncls;
}

sub get_maxsatz_outval() {
    my $fname = shift;
    open (OUTF, "<$fname") || die "Unable to open output file $fname";
    my $rval = -1;
    while (<OUTF>) {
	if (m/Best\s+Solution\s*=\s*(\d+)/) { $rval=$1; last; }
    }
    #print "Best sol: $rval\n";
    close(OUTF);
    return $rval;
}

sub match_usage_limit() {
    my $fname = shift;
    open (LOGF, "<$fname") || die "Unable to open log file $fname\n";
    my $timeout = 0;
    while (<LOGF>) {
	if (m/Command exited with non-zero status [1-9][0-9]/ ||
	    m/Command exited with non-zero status [2-9]/) {
	    $timeout=1; last;
	}
	if (m/Command terminated by signal /) { $timeout=1; last; }
	if (m/Command terminated abnormally/) { $timeout=1; last; }
	if (m/Out of memory/) { $timeout=1; last; }
	if (m/tlaunch/ && m/Segmentation fault/) { $timeout=1; last; }
	# if (m/Cputime limit exceeded/) { $timeout=1; last; } # NOT USED
    }
    close(LOGF);
    return $timeout;
}

sub match_error_condition() {
    my $fname = shift;
    open (LOGF, "<$fname") || die "Unable to open log file $fname\n";
    my $notok = 0;
    while (<LOGF>) {
	if (m/Segmentation fault/ || m/Bus [Ee]rror/ || 
	    m/erreur/ || m/Out of memory/ || m/problem/) {
	    $notok=1; last;
	}
    }
    close(LOGF);
    return $notok;
}

sub match_run_time() {
    my $fname = shift;
    open (LOGF, "<$fname") || die "Unable to open log file $fname\n";
    my $tuser = 0;
    my $tsys = 0;
    while (<LOGF>) {  # This is for Linux machines!!!
        if (m/\s*user\s+(\d+\.?\d*)/) {
            $tuser = $1;
        } elsif (m/\s*sys\s+(\d+\.?\d*)/) {
            $tsys = $1; last;
        }
    }
    close(LOGF);
    return $tuser+$tsys;
}

# jpms
