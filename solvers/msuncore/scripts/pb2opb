#!/usr/bin/perl
# Copyright (c) 2007 Joao Marques-Silva. All rights reserved.

use strict;
use Data::Dumper;
use POSIX;
use Getopt::Std;

my $progname = &get_progname();

my %opts = ();
getopts('hd', \%opts);
# d: Debug mode
# h: print Help

if ($opts{h} || $#ARGV < 0) {
    print <<EOF;
  $progname: PB to OPB converter
  Usage:
    $progname [-h] [-d] <opb file>
     -d    debug mode
     -h    prints this help
  Author: jpms\@soton.ac.uk
EOF
exit(0);
}

my $debug = ($opts{d}) ? 1 : 0;

my %varids = ();
my $vcnt = 0;

my $buffer = '';
while(<>) {
    chomp;
    next if m/^\*/;
    s/(\d+)\s*\*\s*([^\s\*]+)/$1 $2/g;
    s/([\-\+])\s+(\d+)/$1$2/g;
    $buffer .= $_;
    if ($buffer =~ m/([^;]+);/) {
	$buffer = $1;
	my @ltoks = split(/\s+/, $buffer);
	my $vtog = 0;
	my $rhs = 0;
	for (my $i=0; $i<=$#ltoks; ++$i) {
	    next if ($ltoks[$i] eq 'min:');
	    next if $rhs;
	    if (!$vtog) {
		if ($ltoks[$i] eq '>=') { $rhs = 1; }
		else                    { $vtog = 1; }
	    } else {
		my $vref = $ltoks[$i];
		if (!defined($varids{$vref})) {
		    $varids{$vref} = ++$vcnt;
		}
		$ltoks[$i] = "x$varids{$vref}";
		$vtog = 0;
	    }
	}
	print "@ltoks ;\n";
	$buffer = '';
    }
}

1;

sub xabort() {
    my $msg = shift;
    print "ERROR: $msg\n";
    exit(2);
}

sub get_progname() {
    my @progname_toks = split(/\//, $0);
    my $progname = $progname_toks[$#progname_toks];
    #print "$progname\n";
    return $progname;
}

# jpms
