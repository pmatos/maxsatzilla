#!/usr/bin/perl
##-d:DProf

#------------------------------------------------------------------------------#
# File:        msuncore
#
# Description: Main msuncore script: collection of MaxSAT algorithms.
#
# Author:      Joao Marques-Silva.
#
# Created:     13 Sep 2007.
#
# Revision:    $Id$.
#------------------------------------------------------------------------------#

push @INC, \&resolve_inc;

use strict;

use Data::Dumper;

use POSIX;

use Getopt::Std;

require UTILS;  # Must use require, to get INC updated
import UTILS;

require MSUDS;
import MSUDS;

require msu1;
import msu1;

require msu2;
import msu2;

require msu3;
import msu3;

require msu4;
import msu4;

my $progname = &UTILS::get_progname();

# 1. Setup script
my $ds = MSUDS::new();   # MaxSAT data structures
&UTILS::register_cleanup(\&finishup);
&UTILS::register_ds($ds);

my $opts = $ds->{OPTS};
getopts('hdcvT:m:fe:a:', $opts);
# a: Algorithm to use
# e: Encoding to use
# m: atMost constraint on variable
# T: Timeout
# v: Verbose
# c: Check mode (do not delete temp files)
# d: Debug mode
# h: print Help

if (${$opts}{h} || $#ARGV < 0) {
    print <<EOF;
  $progname: maxsat solver based on unsat cores \& card constraints
  Usage:
    $progname [-d] [-c] [-v] [-T NNN] [-f] [-e {a|b|i|s|c|e}] [m BBB] [-a ALG] <clset>
      -a NNN   algorithm version to use
      -m BBB   at most 1 true blocking var per clause for >= BBB locking vars
      -e {a|b|i|c|e|s} encoding of card constraints
                     {a|b|i|c|e|d}: (Adders, Bdds w/ equiv, Bdds w/ implic, Counters, Exp, Sorters)
      -f       implement clause filtering hints
      -T NNN   specify timeout
      -v       verbose mode: output run time data
      -c       check mode: keep temp files
      -d       debug mode: dump run info to file
      -h       prints this help
  Notes:
    -e: BDDs ok; Exp & Counters only for <= 1; Adders & Sorters not implemented
    -e: Bdds in mode i are being evaluated
  Author(s): jpms\@soton.ac.uk \& jp3\@soton.ac.uk
EOF
exit(0);
}
#      -p       clause filtering conditions [NOT WORKING]
# Notes: -p: current condition is *not* correct 20070915

if (${$opts}{d}) { print Dumper($opts); print Dumper($ds); }

&UTILS::register_handlers();

$ds->set_inpfile(shift @ARGV);
if(${$opts}{T}) { $ds->set_timeout(${$opts}{T}); }    # Specify timeout

if (${$opts}{a}) {
    my $msuv = ${$opts}{a};
    if ($msuv eq '1')    { $ds->set_version($msuv); &msu1::run_msu($ds); }
    elsif ($msuv eq '2') { $ds->set_version($msuv); &msu2::run_msu($ds); }
    elsif ($msuv eq '3') { $ds->set_version($msuv); &msu3::run_msu($ds); }
    elsif ($msuv eq '4') { $ds->set_version($msuv); &msu4::run_msu($ds); }
    else { print "Invalid MSU algorithm chosen. Check documentation\n"; }
} else {
    $ds->set_version('3'); &msu3::run_msu($ds);  # 3rd algorithm as default
}

&finishup($ds);

1;


#------------------------------------------------------------------------------#
# Final cleanup
#------------------------------------------------------------------------------#

sub finishup() {
    my $ds = shift;
    my $opts = $ds->opts;
    my $cnffile = $ds->cnffile;
    my $outfile = $ds->outfile;
    my $tmpfile = $ds->tmpfile;
    my $dbgfile = $ds->dbgfile;
    my $corefile = $ds->corefile;
    my $logfile = $ds->logfile;
    if (!${$opts}{c}) { system("rm -f $cnffile $outfile $tmpfile $corefile"); }
    if (${$opts}{d} && !${$opts}{c}) {
	close DBGF; system("rm -f $dbgfile $logfile"); }
}


#------------------------------------------------------------------------------#
# Auxiliary functions
#------------------------------------------------------------------------------#

sub resolve_inc() {    # Copy from template kept in UTILS package
    my ($cref, $pmname) = @_;
    my @progname_toks = split(/\//, $0);
    pop @progname_toks;
    my $progpath = join('/', @progname_toks);
    my $fullname = $progpath . '/' . $pmname;
    my $fh;
    open($fh, "<$fullname") || die "non-existing $pmname\n";
    return $fh;
}

#------------------------------------------------------------------------------#
