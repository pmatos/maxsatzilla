#!/usr/bin/perl

use strict;
use Data::Dumper;
use POSIX;
use Getopt::Std;

my $progname = &get_progname();
my $progpath = &get_progpath();

my %opts = ();
getopts('hdctr:', \%opts);
# d: Debug mode
# h: print Help

if ($opts{h} || $#ARGV < 0) {
    print <<EOF;
  $progname: OPB to PMCNF converter
  Usage:
    $progname [-h] [-d] [-c] [-t] <opb file>
     -r <N> tool release to consider (1, 2, 3 or 4)
     -t     output run time info
     -c     check mode: keep intermediate files
     -d     debug mode
     -h     prints this help
  Author: jpms\@soton.ac.uk
EOF
exit(0);
}

my $debug = ($opts{d}) ? 1 : 0;

my $grpout = '__grp_bcp_outp_file__';
my $msuout = '__msu_bcp_outp_file__';
my $fname = shift @ARGV;
my $tfname = &get_file_tail($fname);
my $tfext = &get_file_extension($tfname);
my $fnoext = &get_file_noextension($tfname);
my $fnoext2 = &get_file_noextension($fnoext);
#print "FNAME: $tfname ; EXT: $tfext; NOEXT: $fnoext; NOEXT2: $fnoext2\n"; exit;

# 1. Initial cleanup...
if (!$opts{c}) { `rm -f $msuout $grpout`; }

`cp -f $fname $tfname`;
my $wfname = '';
my $rfname = '';
my $pmname = '';
# 2. Convert from OPB to PMCNF (if .bz2, extract file)
if ($tfext =~ m/bz2/) {
    $wfname = $fnoext;
    $rfname = $fnoext2;
    `rm -f $wfname`;
    `bunzip2 $tfname`;
} elsif ($fname =~ m/gz/) {
    $wfname = $fnoext;
    $rfname = $fnoext2;
    `rm -f $wfname`;
    `gunzip $tfname`;
} else {
    $wfname = $tfname;
    $rfname = $fnoext;
}
my $pmfname = "$rfname.pmcnf";
if ($debug) {
    print "OPB file name:     $wfname\n";
    print "Default file name: $rfname\n";
    print "PMCNF file name:   $pmfname\n";
}
`$progpath/../scripts/opb2pmcnf $wfname > $pmfname`;  # now the .pmcnf file has been generated

# 3. Check valid conversion (i.e. whether instance is BCP/MinCost SAT)
`grep 'ERROR' $pmfname > $grpout`;
open(CHKF, "$grpout") || die "No $grpout file available?\n";
while(<CHKF>) {
    if (m/ERROR/) {
	&xabort("Instance $fname is not in BCP format. Terminating...\n");
    }
}
close CHKF;

# 4. Run partial MaxSAT solver (timeout = 1000s)
my $msucmd = '';
if (!$opts{r} || $opts{r} == 2) {
    $msucmd = '-a 1 -e i -m 4 -v 3';
} elsif ($opts{r} == 1) {
    $msucmd = '-a 1 -e e -v 3';
} elsif ($opts{r} == 3) {
    $msucmd = '-a 3 -e i -v 3';
} elsif ($opts{r} == 4) {
    $msucmd = '-a 2 -e i -v 3';
}
if ($debug) {
    print "CMD: $progpath/msuncore $msucmd $pmfname > $msuout\n";
}
# The actual command...
`$progpath/msuncore $msucmd $pmfname > $msuout`;

# 5. Parse output of partial MaxSAT solver
my $bcpsol = &parse_msu_output($msuout);

# 6. Write BCP solution
if ($opts{t}) {
    my ($tuser, $tsys, $cuser, $csys) = times;
    my $trun = sprintf("%3.2f", $tuser + $tsys + $cuser + $csys);
    print "$rfname\t\t$bcpsol\t\t$trun\n";
} else {
    print "$rfname BCP solution: $bcpsol\n";
}

# 7. Final cleanup ...
if (!$opts{c}) { `rm -f $msuout $grpout $tfname $wfname $pmfname`; }

1;

sub get_file_tail() {
    my $fname = shift @_;
    my @pathtoks = split(/\//, $fname);
    return $pathtoks[$#pathtoks];
}

sub get_file_extension() {
    my $tfname = shift @_;
    my @exttoks = split(/\./, $tfname);
    return $exttoks[$#exttoks];
}

sub get_file_noextension() {
    my $tfname = shift @_;
    my @exttoks = split(/\./, $tfname);
    pop @exttoks;
    my $rstr = join('.', @exttoks);
    return $rstr;
}

sub parse_msu_output() {
    my $msuout = shift @_;
    my $bvar_patt = 'Number of block vars:';
    my $skipv_patt = 'Number of skipped cls:';
    my $lb_pattA = 'Running iteration';
    my $lb_pattB = 'Running 2nd loop iteration';
    my $nbvar = 0; my $nsvar = 0; my $lbval = 0;
    my $matchb = 0; my $matchs = 0;
    open (OUTF, "$msuout") || die "Unable to open MSU output file $msuout??\n";
    while(<OUTF>) {
	if (m/$bvar_patt\s+(\d+)/) {
	    $nbvar = $1; $matchb = 1;
	} elsif (m/$skipv_patt\s+(\d+)/) {
	    $nsvar = $1; $matchs = 1;
	} elsif (m/$lb_pattA\s+(\d+)/) {
	    $lbval = $1;
	} elsif (m/$lb_pattB\s+(\d+)/) {
	    $lbval = $1;
	}
    }
    my $bcpsol = '';
    if (!$matchb || !$matchs) {
	my $lbres = $nsvar + $lbval - 1;
	$bcpsol = 'lb' . $lbres;
    } else {
	$bcpsol = $nsvar + $nbvar;
    }
    #return ($bcpsol > 0) ? $bcpsol : '--';
    return $bcpsol;
}

sub xabort() {
    my $msg = shift;
    print "ERROR: $msg\n";
    exit(2);
}

sub get_progname() {
    my @progname_toks = split(/\//, $0);
    my $progname = $progname_toks[$#progname_toks];
    #print "$progname\n";
    return $progname;
}

sub get_progpath() {
    my @progname_toks = split(/\//, $0);
    pop @progname_toks;
    my $progpath = join('/', @progname_toks);
    #print "$progpath\n";
    return $progpath;
}

# jpms
